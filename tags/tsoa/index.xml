<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tsoa on Rosack Software Solutions</title><link>/tags/tsoa/</link><description>Recent content in tsoa on Rosack Software Solutions</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Mar 2017 13:30:50 +0000</lastBuildDate><atom:link href="/tags/tsoa/index.xml" rel="self" type="application/rss+xml"/><item><title>Serverless, "Monolithic" APIs, and TSOA</title><link>/posts/serverless-monolithic-apis-and-tsoa/</link><pubDate>Mon, 20 Mar 2017 13:30:50 +0000</pubDate><guid>/posts/serverless-monolithic-apis-and-tsoa/</guid><description>I&amp;rsquo;ve been geeking out quite a bit over Functions as a Service and the Serverless Framework for the past year or so. I wrote the backend for Play Your Damn Turn using it, and I think it&amp;rsquo;s great for startup scenarios - you can write something and get it out there without having to worry about the costs of hosting, and if it suddenly becomes popular it&amp;rsquo;s already built to scale.</description><content>&lt;p>I&amp;rsquo;ve been geeking out quite a bit over Functions as a Service and the &lt;a href="https://serverless.com/">Serverless Framework&lt;/a> for the past year or so. I wrote the backend for &lt;a href="https://www.playyourdamnturn.com/">Play Your Damn Turn&lt;/a> using it, and I think it&amp;rsquo;s great for startup scenarios - you can write something and get it out there without having to worry about the costs of hosting, and if it suddenly becomes popular it&amp;rsquo;s already built to scale.&lt;/p>
&lt;p>That said, the Serverless Framework is still in it&amp;rsquo;s infancy, and there aren&amp;rsquo;t tons of best practices out there around using it. The Serverless team had a good blog post last year describing a couple possible approaches of how you could structure your application: &lt;a href="https://serverless.com/blog/serverless-architecture-code-patterns/">Serverless Code Patterns&lt;/a>. In short, that article calls out 4 different possible approaches: Microservices, where every function maps to one API call; Services/Monolithic, where you group multiple API calls into one function; and Graph, where you just expose GraphQL from one function. For PYDT, I did things Microservices style, partly because I started writing PYDT before that article was written, and partly because all of the examples out there show how you to do things the Microservices way.&lt;/p>
&lt;p>The Microservices pattern has a couple big downsides, though:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Cold Starts&lt;/strong>: When a FaaS function gets called, what&amp;rsquo;s really happening behind the scenes is a Docker container is spinning up, loading your code, and executing it. That spin up process isn&amp;rsquo;t free, and can take on the order of seconds to be ready for use. However, if you call a function multiple times in short order, the container that the code originally ran in can be reused, removing the spin up cost.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>CloudFormation Limits&lt;/strong>: Serverless uses CloudFormation behind the scenes for AWS deployments. Unfortunately, &lt;a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">CloudFormation has limits&lt;/a>, and there&amp;rsquo;s &lt;a href="https://github.com/serverless/serverless/issues/2853">only so many functions you can add into a Serverless service&lt;/a> before you hit these limits. I ran into this with PYDT, and I&amp;rsquo;ve had to resort to some ugly hacks to be able to fit more and more functions into the service. There&amp;rsquo;s not much they can do to fix this without getting into split CloudFormation stacks, and I think that&amp;rsquo;s pretty far down on their list at the moment.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve been kicking off a new project over the past couple of days, and because of those downsides I really didn&amp;rsquo;t want to go down the Microservices path again. Also, using Angular2 has really made me love Typescript, and I wanted to use it for the backend. If I was going to do that, couldn&amp;rsquo;t I get some cool benefits from having a strongly typed backend like auto-generation of Swagger schemas?&lt;/p>
&lt;p>Why yes, yes I could! I stumbled upon the &lt;a href="https://github.com/lukeautry/tsoa">TSOA Framework&lt;/a>, which is suprisingly the only framework I could find that&amp;rsquo;s using the benefits of Typescript to create an API backend that generates all the boilerplate for you. I forked their startup project, started playing around, and this is the result: &lt;a href="https://github.com/mrosack/tsoa-serverless-example">https://github.com/mrosack/tsoa-serverless-example&lt;/a>. It&amp;rsquo;s still super raw, but even in its initial state it&amp;rsquo;s got a lot of cool benefits over doing things the standard Javascript/Microservice way:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Automatically Generate swagger.json&lt;/strong>: This is the big carrot that TSOA waves out in front of you, and I love it. Keeping a swagger definition file up to date manually is a gigantic pain, and without eternal vigilance it can become useless pretty quickly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Dependency Injection&lt;/strong>: This is another thing that comes out of the box with TSOA. It uses &lt;a href="https://github.com/inversify/InversifyJS">InversifyJS&lt;/a> for it&amp;rsquo;s IOC container, and adds some sweet syntatic sugar to help hook up all the injections for you.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>No Cold Starts/Limits&lt;/strong>: The entire API is being deployed to a single Lambda function using &lt;a href="http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-http.html">API Gateway Proxy/ANY&lt;/a>, so you don&amp;rsquo;t need to worry about cold starts for infrequently used functions or those pesky CloudFormation limits.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/mrosack/tsoa-serverless-example">Go take a look and let me know what you&amp;rsquo;ll think!&lt;/a> I&amp;rsquo;ll be updating things as I get deeper into my own project, but I think the value is pretty clear even now and I&amp;rsquo;m really excited to keep playing with it!&lt;/p></content></item></channel></rss>